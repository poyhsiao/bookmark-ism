# syntax=docker/dockerfile:1

# Production Dockerfile - Multi-stage build for Go application
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set environment variables for Go build
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64

# Set working directory in build stage
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies with cache mount for better performance
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && go mod verify

# Copy only necessary source code (backend directory)
COPY backend ./backend

# Build the application with optimizations and cache mount
RUN --mount=type=cache,target=/root/.cache/go-build \
    go build \
    -a -installsuffix cgo \
    -ldflags="-w -s" \
    -o main ./backend/cmd/api

# Final stage - use distroless for security and minimal size
FROM gcr.io/distroless/static:nonroot

# Copy ca-certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary from builder
COPY --from=builder /app/main /main

# Use nonroot user for security
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Run the application
ENTRYPOINT ["/main"]